/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var u=Object.create;var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var w=(n,e)=>{for(var t in e)c(n,t,{get:e[t],enumerable:!0})},h=(n,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of f(e))!P.call(n,o)&&o!==t&&c(n,o,{get:()=>e[o],enumerable:!(i=y(e,o))||i.enumerable});return n};var $=(n,e,t)=>(t=n!=null?u(k(n)):{},h(e||!n||!n.__esModule?c(t,"default",{value:n,enumerable:!0}):t,n)),F=n=>h(c({},"__esModule",{value:!0}),n);var g={};w(g,{default:()=>d});module.exports=F(g);var a=require("obsidian"),r=require("child_process"),m=$(require("path")),b=require("fs"),d=class extends a.Plugin{async onload(){this.addCommand({id:"create-jupyter-notebook",name:"Create Jupyter notebook from note",callback:()=>this.createNotebook()}),this.addCommand({id:"open-jupyter-notebook-in-vscode",name:"Open Jupyter notebook in VS Code",callback:()=>this.openNotebookInEditor("vscode")}),this.addCommand({id:"open-jupyter-notebook-in-lab",name:"Open Jupyter notebook in Jupyter Lab",callback:()=>this.openNotebookInEditor("jupyter-lab")}),this.registerEvent(this.app.vault.on("modify",e=>this.syncFiles(e)))}getAbsolutePath(e){let t=this.app.vault.adapter;if(t instanceof a.FileSystemAdapter){let i=t.getBasePath();return m.join(i,e.path)}else throw new Error("Cannot get base path: unsupported adapter type.")}async isNotebookPaired(e){let i=this.getAbsolutePath(e).replace(/\.md$/,".ipynb");try{return await b.promises.access(i,b.promises.constants.F_OK),!0}catch(o){return!1}}async createNotebook(){let e=this.app.workspace.getActiveFile();if(!e){new a.Notice("No active note found.");return}let t=this.getAbsolutePath(e),i=t.replace(/\.md$/,".ipynb");if(await this.isNotebookPaired(e)){new a.Notice("Notebook is already paired with this note.");return}(0,r.exec)(`jupytext --to notebook "${t}"`,o=>{if(o){new a.Notice(`Failed to create notebook: ${o.message}`);return}(0,r.exec)(`jupytext --set-formats ipynb,md "${i}"`,s=>{if(s){new a.Notice(`Failed to pair notebook: ${s.message}`);return}new a.Notice(`Notebook created and paired: ${i}`)})})}async openNotebookInEditor(e){let t=this.app.workspace.getActiveFile();if(!t){new a.Notice("No active note found.");return}if(!await this.isNotebookPaired(t)){new a.Notice("No paired Jupyter Notebook found for this note.");return}let o=this.getAbsolutePath(t).replace(/\.md$/,".ipynb"),s,p;switch(e){case"vscode":s=`code "${o}"`,p="VS Code";break;case"jupyter-lab":s=`python -m jupyterlab "${o}"`,p="Jupyter Lab";break;default:throw new Error(`Unsupported editor: ${e}`)}(0,r.exec)(s,l=>{if(l){new a.Notice(`Failed to open notebook in ${p}: ${l.message}`);return}new a.Notice(`Opened notebook in ${p}: ${o}`)})}async syncFiles(e){if(!(e instanceof a.TFile))return;let t=this.getAbsolutePath(e);if(t.endsWith(".md")){let i=t.replace(/\.md$/,".ipynb");(0,r.exec)(`jupytext --sync "${i}"`,o=>{o&&console.error(`Failed to sync Markdown file: ${o.message}`)})}else if(t.endsWith(".ipynb")){let i=t.replace(/\.ipynb$/,".md");(0,r.exec)(`jupytext --sync "${i}"`,o=>{o&&console.error(`Failed to sync Jupyter Notebook: ${o.message}`)})}}};

/* nosourcemap */